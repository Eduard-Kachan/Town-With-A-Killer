// Require Native Node.js Librariesvar express = require('express');var app = express();var http = require('http').Server(app);var io = require('socket.io')(http);var rooms = {};// ------------------------------------// Route our Assets// ------------------------------------app.use('/assets/', express.static(__dirname + '/public/assets/'));// ------------------------------------// Route to Pages// ------------------------------------// Home Pageapp.get('/', function(req, res){  res.sendFile(__dirname + '/public/index.html');});// Any Room Pageapp.get('/room/*', function(req, res){  //console.log(req.originalUrl);  res.sendFile(__dirname + '/public/room.html');});// ------------------------------------// Handle Socket Connection// ------------------------------------io.on('connection', function(socket) {  console.log('user connected: id=' + socket.id);  var url = socket.handshake.headers.referer.split('/');  var roomName = url[url.length-1];  var room;  var isInARoom = false;  if(url[url.length-2] == 'room'){    isInARoom = true;  }  if(isInARoom){    if(rooms[roomName]){      console.log('room exists: ' + roomName);    }else{      rooms[roomName] = new Room();      rooms[roomName].roomName = roomName;      console.log('gonna make a new room: ' + roomName);    }    rooms[roomName].addUser(socket);  }});// ------------------------------------// Start Server// ------------------------------------http.listen(process.env.PORT || 3000, process.env.IP || "0.0.0.0", function(){  var addr = http.address();  console.log("Server started at", addr.address + ":" + addr.port);});// ------------------------------------// Room Object// ------------------------------------function Room() {  this.states = {    waiting:'Waiting For Users',    aboutToStars:'About To Start',    day:'Day',    night:'Night'  };  this.roomName = undefined;  this.roomState = this.states['waiting'];  this.maxPlayers = 3;  this.capacityReached = false;  this.players = [];  this.guests = [];  this.roomTimer = 0;  this.countDown = null;  this.numOfReturns = 0;  this.alive = this.maxPlayers;  this.changeRoomState = function(state){    this.roomState = this.states[state];    this.emitToRoomUsers('gameState', this.roomState);    console.log(this.roomName + ' room state is now: ' + this.roomState);    console.log('timer ended, room state is: ' + this.roomState);  };  this.addUser = function(socket){    this.addEventListeners(socket);    var isWaiting = (this.roomState === this.states['waiting']);    var isCapacityNotReached = (this.players.length < this.maxPlayers);    if(isWaiting && isCapacityNotReached) {      this.players.push(socket);      console.log(this.roomName + ' ' + socket.id + ' ' + this.players.length);      this.broadcastToRoomUsers('newPlayer', {        name:socket.name || 'Anonymous',        userID: socket.id      }, socket);    } else {      this.guests.push(socket);      console.log(this.roomName + ' ' + socket.id + ' ' + this.guests.length);      this.broadcastToRoomUsers('newGuest', {        name: socket.name || 'Anonymous',        userID: socket.id      }, socket);    }    socket.emit('initialSubmit', this.getInitialSubmit(socket.id));    if(!this.capacityReached && this.players.length == this.maxPlayers){      this.capacityReached = true;      this.startCountdown();    }  };  this.getInitialSubmit = function(userID){    var list = {      userID:userID,      gameState:this.roomState,      players:[]      //guests:[]    };    //refactored later    this.players.forEach(function(player){      list.players.push({        name:player.name || 'Anonymous',        userID: player.id,        status: player.status || 'alive'      });    });    //refactored later    //this.guests.forEach(function(guest){    //  list.guests.push({    //    name:guest.name || 'Anonymous',    //    userID: guest.id    //  });    //});    return list;  };  this.removeUser = function(socket){    var indexOfUser;    if(this.players.indexOf(socket) != -1){      this.broadcastToRoomUsers('remove', {        userID: socket.id      }, socket);      console.log('removed user id: ' + socket.id);      indexOfUser = this.players.indexOf(socket);      this.players.splice(indexOfUser, 1);      console.log(this.roomName + ' ' + this.players.length);      //if(this.guests.length > 0) {      //  //add guest to players      //  var firstGuest = this.guests.splice(0, 1);      //  players.push(firstGuest[0]);      //  firstGuest[0].emit('player');      //}    }else{      this.broadcastToRoomUsers('remove', {        userID: socket.id      }, socket);      console.log('removed user id: ' + socket.id);      indexOfUser = this.guests.indexOf(socket);      this.guests.splice(indexOfUser, 1);      console.log(this.roomName + ' '+ this.guests.length);    }  };  this.getNumberOfUsers = function(){    var num = this.players.length + this.guests.length;    return num;  };  this.startCountdown = function(){    var self = this;    this.changeRoomState('aboutToStars');    this.roomTimer = 0;    console.log('game about to start in room: ' + this.roomName);    this.countDown = setInterval(function(){      var isCapacityNotReached = self.players.length < self.maxPlayers;      //var isAboutToStars = self.roomState == self.states['aboutToStars'];      if(isCapacityNotReached){        console.log('not inofe people, clear the timer');        clearInterval(self.countDown);        self.capacityReached = false;        self.changeRoomState('waiting');        return;      }      if(self.roomTimer == 5){        console.log('game started in: ' + self.roomState);        self.chouseMurderer();        self.identifyPlayers();        clearInterval(self.countDown);        self.startDayCycle();        return;      }      self.emitToRoomUsers('timer', 30 - self.roomTimer);      //console.log(self.roomTimer + 's until start in: ' + self.roomName);      self.roomTimer = self.roomTimer + 1;    }, 1000);  };  this.startDayCycle = function(){    var self = this;    this.changeRoomState('day');    this.roomTimer = 0;    console.log("It's day in: " + this.roomName);    this.sendAlistOfUsersToVote();    this.countDown = setInterval(function(){      if(self.roomTimer == 30){        this.emitToRoomUsers('getVotes');        self.startNightCycle();        clearInterval(self.countDown);        return;      }      self.emitToRoomUsers('timer', 30 - self.roomTimer);      self.roomTimer = self.roomTimer + 1;    }, 1000);  };  this.startNightCycle = function(){    var self = this;    this.changeRoomState('night');    this.roomTimer = 0;    console.log("It's night in: " + this.roomName);    this.countDown = setInterval(function(){      if(self.roomTimer == 5){        clearInterval(self.countDown);        self.startDayCycle();        return;      }      self.emitToRoomUsers('timer', 30 - self.roomTimer);      self.roomTimer = self.roomTimer + 1;    }, 1000);  };  this.emitToRoomUsers = function(emit, message){    var send = {      emit:emit,      message:message,      fromUser:null    };    this.emitToEvery(this.players, send);    this.emitToEvery(this.guests, send);  };  this.broadcastToRoomUsers = function(emit, message, user){    var send = {      emit:emit,      message:message,      fromUser:user    };    this.emitToEvery(this.players, send);    this.emitToEvery(this.guests, send);  };  this.emitToEvery = function(group, send){    group.forEach(function (socket) {      if(send.fromUser != socket){        socket.emit(send.emit, send.message);      }    });  };  this.addEventListeners = function(socket){    var self = this;    socket.on('disconnect', function(message) {      self.removeUser(socket);      if(self.getNumberOfUsers() == 0){        console.log('No users in room: ' + self.roomName +'. Gonna remove this room');        delete rooms[self.roomName];      }    });    socket.on('identify',function(name){      socket.name = name;      self.broadcastToRoomUsers('identified',{        name:socket.name,        userID: socket.id      }, socket);    });    socket.on('message',function(message){      var name = socket.name || 'Anonymous';      var messagelog = name + ': ' + message;      self.emitToRoomUsers('messagelog', messagelog);    });    socket.on('vote', function(voteID){      self.players.forEach(function(player){        if(player.id == voteID){          if(!player.votesAgainst){            player.votesAgainst = 0;          }else{            player.votesAgainst++;          }        }      });      self.numOfReturns++;      if(self.numOfReturns == self.alive){        self.countVotes();      }    });  };  this.chouseMurderer = function(){    var maxNum = this.players.length;    var random = Math.floor(Math.random()*maxNum);    this.players[random].type = 'Murderer';    console.log('murderer is : ' + this.players[random].id);  };  this.identifyPlayers = function(){    this.players.forEach(function(player){      if(!player.type){        player.type = 'Innocent'      }      player.emit('type', player.type);    });  };  this.sendAlistOfUsersToVote = function(){    var list = [];    this.players.forEach(function(player){      list.push({        userID: player.id,        username: player.name || 'Anonymous'      })    });    this.emitToRoomUsers('vote', list);  };  this.countVotes = function(){    var votes = [];    var names = [];    this.players.forEach(function(player){      names.push(player.id);      votes.push(player.votesAgainst);    });    // Get the max value from the array    var largestVote = Math.max.apply(Math, votes);    console.log('the largest vote is: ' + largestVote);    var last = votes.lastIndexOf(largestVote);    var first = votes.indexOf(largestVote);    if(last != first){      console.log('its a tie');      this.startNightCycle();      return;    }    //player died    var name = names[first];    var self = this;    this.players.forEach(function(player){      if(player.id == name){        console.log('player id:' + player.id + ' has died');        player.status = 'dead';        self.emitToRoomUsers('dead', player.id);      }    });  }}