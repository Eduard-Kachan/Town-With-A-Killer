// Require Native Node.js Librariesvar express = require('express');var app = express();var http = require('http').Server(app);var io = require('socket.io')(http);var players = [];var guests = [];var gameTimer = 0;var maxPlayers = 3;var maxPeopleReached = false;var countDown;//timet on ser ver side// set time out//timesr array//var serverTimer = setInterval(function(){//  seconds = seconds + 1;//  console.log(seconds);//  if(seconds == 5){//    console.log('time stop');//    clearInterval(serverTimer);//  }//}, 1000);//var socketList = {//  players: [],//  guests: []//};////var userList = {//  players: [],//  guests: []//};// Route our Assetsapp.use('/assets/', express.static(__dirname + '/public/assets/'));// Route our Home Pageapp.get('/', function(req, res){  res.sendFile(__dirname + '/public/index.html');});app.get('/room/*', function(req, res){  //console.log(req.originalUrl);  //res.sendFile(__dirname + '/public/index.html');  res.end("Room Route\n");});// / 'room' / 'darcy'// /rooms/*//express.js// Handle Socket Connectionio.on('connection', function(socket) {  console.log(socket.handshake.headers.referer);  console.log('user connected');  socket.emit('myId', socket.id);  if(players.length < maxPlayers){    players.push(socket);    socket.broadcast.emit('newPlayer', {      name:socket.name || 'Anonymous',      userID: socket.id    });  }  else{    guests.push(socket);    socket.broadcast.emit('newGuest',{      name:socket.name || 'Anonymous',      userID: socket.id    });  }  if(!maxPeopleReached && players.length == maxPlayers){    maxPeopleReached = true;    io.emit('gameAboutToStart');    startCountdown();  }  var list = getListOfUsers();  socket.emit('users', list);  socket.on('identify',function(name){    socket.name = name;    socket.broadcast.emit('identified', {      name:socket.name,      userID: socket.id    });  });  socket.on('disconnect', function(message) {    //remove user from the game    if(players.indexOf(socket) != -1){      //remove player      players.splice(players.indexOf(socket), 1);      if(guests.length > 0) {        //add guest to players        var firstGuest = guests.splice(0, 1);        players.push(firstGuest[0]);        firstGuest[0].emit('player');      }      if(players.length < maxPlayers && maxPeopleReached){        maxPeopleReached = false;      }    }else{      //remove guest      guests.splice(guests.indexOf(socket), 1);    }    io.emit('remove', {userID:socket.id});  });});var startCountdown = function(){  gameTimer = 0;  countDown = setInterval(function(){    if(gameTimer == 30){      clearInterval(countDown);      return;    }    io.emit('timer', {      timerName:'countDown',      timer: gameTimer    });    gameTimer = gameTimer + 1;  }, 1000);};// Start Serverhttp.listen(process.env.PORT || 3000, process.env.IP || "0.0.0.0", function(){  var addr = http.address();  console.log("Server started at", addr.address + ":" + addr.port);});var getListOfUsers = function(){  var list = {    players:[],    guests:[]  };  players.forEach(function(player){    list.players.push({      name:player.name || 'Anonymous',      userID: player.id    });  });  guests.forEach(function(guest){    list.guests.push({      name:guest.name || 'Anonymous',      userID: guest.id    });  });  return list;};//var getGuestsNamesWithID = function (){//  var list = [];//  guests.forEach(function(player){//    list.push({//      name:player.name || 'Anonymous',//      userID: player.id//    });//  });//  return list;//};