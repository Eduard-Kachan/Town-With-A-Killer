// Require Native Node.js Librariesvar express = require('express');var app = express();var http = require('http').Server(app);var io = require('socket.io')(http);//var players = [];//var guests = [];//var gameTimer = 0;var maxPlayers = 3;var maxPeopleReached = false;var countDown;var rooms = {};// ------------------------------------// Route our Assets// ------------------------------------app.use('/assets/', express.static(__dirname + '/public/assets/'));app.use('/scripts/', express.static(__dirname + '/public/assets/scripts'));app.use('/styles/', express.static(__dirname + '/public/assets/styles'));// ------------------------------------// Route to Pages// ------------------------------------// Home Pageapp.get('/', function(req, res){  res.sendFile(__dirname + '/public/index.html');});// Any Room Pageapp.get('/room/*', function(req, res){  //console.log(req.originalUrl);  res.sendFile(__dirname + '/public/room.html');});// ------------------------------------// Handle Socket Connection// ------------------------------------io.on('connection', function(socket) {  console.log('user connected: id=' + socket.id);  var url = socket.handshake.headers.referer.split('/');  var roomName = url[url.length-1];  var room;  var isInARoom = false;  if(url[url.length-2] == 'room'){    isInARoom = true;  }  if(isInARoom){    if(rooms[roomName]){      console.log('room exists: ' + roomName);    }else{      console.log('gonna make a new room: ' + roomName);      rooms[roomName] = new Room();    }    room = rooms[roomName];    room.addUser(socket);    console.log(rooms);  }  //disabled for now  //if(!maxPeopleReached && room.players.length == maxPlayers){  //  maxPeopleReached = true;  //  io.emit('gameAboutToStart');  //  startCountdown();  //}  //disabled for now  //socket.on('identify',function(name){  //  socket.name = name;  //  socket.broadcast.emit('identified', {  //    name:socket.name,  //    userID: socket.id  //  });  //});  socket.on('disconnect', function(message) {    room.removeUser(socket);    if(room.getNumberOfUsers() == 0){      console.log('no users in room "' + roomName +'", gonna remove this room');      delete rooms[roomName];    }  });});//disabled for now//var startCountdown = function(){//  gameTimer = 0;//  countDown = setInterval(function(){////    if(gameTimer == 30){//      clearInterval(countDown);//      return;//    }////    io.emit('timer', {//      timerName:'countDown',//      timer: gameTimer//    });////    gameTimer = gameTimer + 1;////  }, 1000);//};// ------------------------------------// Start Server// ------------------------------------http.listen(process.env.PORT || 3000, process.env.IP || "0.0.0.0", function(){  var addr = http.address();  console.log("Server started at", addr.address + ":" + addr.port);});// ------------------------------------// Room Object// ------------------------------------function Room() {  this.maxPlayers = 3;  this.players = [];  this.guests = [];  this.gameTimer = 0;  this.addUser = function(socket){    if(this.players.length < this.maxPlayers) {      this.players.push(socket);      //socket.broadcast.emit('newPlayer', {      //  name:socket.name || 'Anonymous',      //  userID: socket.id      //});    } else {      this.guests.push(socket);      //socket.broadcast.emit('newGuest',{      //  name:socket.name || 'Anonymous',      //  userID: socket.id      //});    }    socket.emit('myId', socket.id);    socket.emit('users', room.getListOfUsers());  };  this.getListOfUsers = function(){    var list = {      players:[],      guests:[]    };    //refactored later    this.players.forEach(function(player){      list.players.push({        name:player.name || 'Anonymous',        userID: player.id      });    });    //refactored later    this.guests.forEach(function(guest){      list.guests.push({        name:guest.name || 'Anonymous',        userID: guest.id      });    });    return list;  };  this.removeUser = function(socket){    var indexOfUser;    if(this.players.indexOf(socket) != -1){      indexOfUser = this.players.indexOf(socket);      this.players.splice(indexOfUser, 1);      //if(this.guests.length > 0) {      //  //add guest to players      //  var firstGuest = this.guests.splice(0, 1);      //  players.push(firstGuest[0]);      //  firstGuest[0].emit('player');      //}      //if(players.length < maxPlayers && maxPeopleReached){      //  maxPeopleReached = false;      //}    }else{      indexOfUser = this.guests.indexOf(socket);      this.guests.splice(indexOfUser, 1);    }    //io.emit('remove', {userID:socket.id});  };  this.getNumberOfUsers = function(){    var num = this.players.length + this.guests.length;    return num;  };}//var getGuestsNamesWithID = function (){//  var list = [];//  guests.forEach(function(player){//    list.push({//      name:player.name || 'Anonymous',//      userID: player.id//    });//  });//  return list;//};